#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May  2 16:45:23 2023

@author: emielkoridon
"""

import auto_oo
import pytest

import pennylane as qml
from pennylane import math

import torch
from jax.config import config

if '2.1' in torch.__version__:
    torch.set_default_dtype(torch.float64)
else:
    torch.set_default_tensor_type(torch.DoubleTensor)  # Required for compatibility with PennyLane
config.update("jax_enable_x64", True)


def get_pqc(ncas, nelecas, add_singles, ansatz, n_layers, interface):
    dev = qml.device('default.qubit', wires=2*ncas)
    pqc = auto_oo.Parameterized_circuit(ncas, nelecas, dev,
                                        ansatz=ansatz, n_layers=n_layers,
                                        add_singles=add_singles, interface=interface)
    return pqc


@pytest.mark.parametrize(
    ("ncas", "nelecas", "add_singles", "ansatz", "n_layers", "theta", "state_ref"),
    [
        (
            2, 2, False, 'ucc', None,
            math.array([1.3661890029907227]),

            math.array(
                [-7.8505e-17+0.0000e+00j,  0.0000e+00-6.1630e-33j,
                 0.0000e+00-5.5511e-17j, -6.3120e-01+0.0000e+00j,
                 0.0000e+00-6.1630e-33j,  6.8423e-49+0.0000e+00j,
                 2.7756e-17+0.0000e+00j,  0.0000e+00-1.9429e-16j,
                 0.0000e+00+5.5511e-17j, -6.1630e-33+0.0000e+00j,
                 2.9439e-17+0.0000e+00j,  0.0000e+00-1.2757e-16j,
                 7.7562e-01+0.0000e+00j,  0.0000e+00+5.5511e-17j,
                 0.0000e+00+8.8318e-17j, -1.2757e-16+0.0000e+00j])),
        (
            2, 2, True, 'ucc', None,
            math.array([3.42359985, 1.70717095, 1.48767531]),

            math.array(
                [-7.85046229e-17+0.00000000e+00j,  0.00000000e+00+3.11377869e-17j,
                 0.00000000e+00+5.55111512e-17j,  6.11629733e-01+0.00000000e+00j,
                 0.00000000e+00-1.20157720e-16j, -7.85046229e-17+0.00000000e+00j,
                 -4.07163280e-01+0.00000000e+00j,  0.00000000e+00+1.66533454e-16j,
                 0.00000000e+00-1.94289029e-16j,  3.62702098e-01+0.00000000e+00j,
                 -9.81307787e-18+0.00000000e+00j,  0.00000000e+00+2.29856558e-16j,
                 -5.73214027e-01+0.00000000e+00j,  0.00000000e+00-2.22044605e-16j,
                 0.00000000e+00-5.31539090e-17j,  1.86448479e-16+0.00000000e+00j])),
        (
            3, 4, False, 'ucc', None,
            math.array([4.67574753, 5.72828167, 1.53327515, 5.46538254]),

            math.array(
                [-2.42630098e-17+0.00000000e+00j,  0.00000000e+00+3.91043534e-17j,
                 0.00000000e+00-3.92523115e-17j, -3.92523115e-17+0.00000000e+00j,
                 0.00000000e+00-2.61519815e-17j, -1.96139861e-17+0.00000000e+00j,
                 1.23259516e-32+0.00000000e+00j,  0.00000000e+00-7.85046229e-17j,
                 0.00000000e+00+7.92577415e-17j, -6.53799537e-18+0.00000000e+00j,
                 6.16297582e-33+0.00000000e+00j,  0.00000000e+00-5.55111512e-17j,
                 -2.90878985e-16+0.00000000e+00j,  0.00000000e+00+8.57957369e-17j,
                 0.00000000e+00-4.44089210e-16j, -7.19942099e-01+0.00000000e+00j,
                 0.00000000e+00+2.43254066e-18j, -6.97817187e-19+0.00000000e+00j,
                 -1.47196168e-17+0.00000000e+00j,  0.00000000e+00-4.90653893e-18j,
                 1.24263853e-16+0.00000000e+00j,  0.00000000e+00-1.16803564e-18j,
                 0.00000000e+00+2.45326947e-17j, -3.43457725e-17+0.00000000e+00j,
                 7.54220560e-17+0.00000000e+00j,  0.00000000e+00-2.82529435e-17j,
                 0.00000000e+00-1.38777878e-17j,  1.90099980e-01+0.00000000e+00j,
                 0.00000000e+00+3.65256624e-17j, -1.17518127e-16+0.00000000e+00j,
                 -1.04083409e-16+0.00000000e+00j,  0.00000000e+00-6.24500451e-17j,
                 0.00000000e+00-3.01609668e-17j,  8.54248803e-18+0.00000000e+00j,
                 4.16333634e-17+0.00000000e+00j,  0.00000000e+00+9.71445147e-17j,
                 2.08166817e-17+0.00000000e+00j,  0.00000000e+00-6.69835478e-17j,
                 0.00000000e+00-2.77555756e-17j, -4.63050704e-01+0.00000000e+00j,
                 1.47029236e-16+0.00000000e+00j,  0.00000000e+00-1.38777878e-17j,
                 0.00000000e+00-6.86915451e-17j, -6.86915451e-17+0.00000000e+00j,
                 0.00000000e+00+2.13224837e-16j,  4.53650691e-17+0.00000000e+00j,
                 -1.07943857e-16+0.00000000e+00j,  0.00000000e+00-2.45326947e-16j,
                 -1.96261557e-17+0.00000000e+00j,  0.00000000e+00+5.88784672e-17j,
                 0.00000000e+00-2.77555756e-17j, -1.91150595e-01+0.00000000e+00j,
                 0.00000000e+00-9.81307787e-17j, -1.37383090e-16+0.00000000e+00j,
                 1.38777878e-17+0.00000000e+00j,  0.00000000e+00-5.55111512e-17j,
                 0.00000000e+00+5.55111512e-17j,  1.11022302e-16+0.00000000e+00j,
                 3.92523115e-17+0.00000000e+00j,  0.00000000e+00-9.81307787e-18j,
                 -4.41124548e-01+0.00000000e+00j,  0.00000000e+00-5.55111512e-17j,
                 0.00000000e+00-1.07943857e-16j,  3.92523115e-17+0.00000000e+00j])),
        (
            3, 4, True, 'ucc', None,
            math.array([3.31574612, 2.11684266, 3.72919614, 5.56956211, 0.65411553,
                        6.13008892, 5.20383483, 5.41356117]),

            math.array(
                [7.51451700e-17+0.00000000e+00j,  0.00000000e+00+1.03845336e-18j,
                 0.00000000e+00-6.44730349e-17j, -1.00328263e-16+0.00000000e+00j,
                 0.00000000e+00+2.02850592e-18j,  1.71103651e-17+0.00000000e+00j,
                 -2.17382444e-17+0.00000000e+00j,  0.00000000e+00-1.61204969e-16j,
                 0.00000000e+00-2.85625633e-19j, -6.58889628e-17+0.00000000e+00j,
                 7.67702077e-17+0.00000000e+00j,  0.00000000e+00+1.18644234e-16j,
                 -2.26703057e-17+0.00000000e+00j,  0.00000000e+00+1.66533454e-16j,
                 0.00000000e+00+2.22044605e-16j, -6.24184240e-01+0.00000000e+00j,
                 0.00000000e+00-9.39932390e-18j, -1.64592640e-17+0.00000000e+00j,
                 -4.10664770e-17+0.00000000e+00j,  0.00000000e+00-6.05862305e-17j,
                 4.53041379e-17+0.00000000e+00j,  0.00000000e+00-8.07117075e-17j,
                 0.00000000e+00+3.68011958e-17j,  1.42796220e-16+0.00000000e+00j,
                 1.69898605e-17+0.00000000e+00j,  0.00000000e+00-5.21307980e-17j,
                 0.00000000e+00-1.24900090e-16j, -1.39730226e-01+0.00000000e+00j,
                 0.00000000e+00+1.28673672e-16j, -8.35936785e-17+0.00000000e+00j,
                 -3.56814698e-01+0.00000000e+00j,  0.00000000e+00+3.05311332e-16j,
                 0.00000000e+00+6.72989995e-17j,  3.66262663e-17+0.00000000e+00j,
                 3.96116146e-17+0.00000000e+00j,  0.00000000e+00+5.69672338e-17j,
                 4.79357420e-18+0.00000000e+00j,  0.00000000e+00-5.55111512e-17j,
                 0.00000000e+00-2.77555756e-17j, -2.72359996e-01+0.00000000e+00j,
                 -3.15001170e-17+0.00000000e+00j,  0.00000000e+00-1.37492555e-16j,
                 0.00000000e+00-6.86915451e-17j,  1.80112163e-17+0.00000000e+00j,
                 0.00000000e+00+2.77555756e-17j,  1.66109781e-01+0.00000000e+00j,
                 1.29431087e-16+0.00000000e+00j,  0.00000000e+00-8.32667268e-17j,
                 8.78875115e-17+0.00000000e+00j,  0.00000000e+00-6.19417877e-17j,
                 0.00000000e+00+0.00000000e+00j, -2.82854296e-01+0.00000000e+00j,
                 0.00000000e+00-1.11953649e-16j, -3.61945810e-17+0.00000000e+00j,
                 -2.78199168e-01+0.00000000e+00j,  0.00000000e+00+2.77555756e-17j,
                 0.00000000e+00-8.32667268e-17j, -4.02778161e-01+0.00000000e+00j,
                 4.97129646e-17+0.00000000e+00j,  0.00000000e+00+9.74115964e-17j,
                 2.05301648e-01+0.00000000e+00j,  0.00000000e+00+1.38777878e-17j,
                 0.00000000e+00+2.29306910e-17j,  2.45326947e-16+0.00000000e+00j])),
        (
            2, 2, None, 'np_fabric', 1,
            math.array([5.82753507, 4.59608774]),

            math.array(
                [0. + 0.j,  0. + 0.j,  0. + 0.j, -0.64342576+0.j,
                 0. + 0.j,  0. + 0.j,  0.37162275+0.j,  0. + 0.j,
                 0. + 0.j, -0.37162275+0.j,  0. + 0.j,  0. + 0.j,
                 -0.55659354+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j])),
        (
            3, 4, None, 'np_fabric', 3,
            math.array([0.88465702, 0.8053202, 4.6461087, 3.19530468, 1.85946167,
                        0.13810968, 4.00439648, 1.14261791, 3.57365805, 4.82835098]),

            math.array(
                [0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.37750099+0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.28565238+0.j,
                 0. + 0.j,  0. + 0.j, -0.32613405+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j, -0.28565238+0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.32613405+0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j, -0.04361082+0.j,
                 0. + 0.j,  0. + 0.j, -0.4129084 + 0.j,  0. + 0.j,
                 0. + 0.j,  0.4129084 + 0.j,  0. + 0.j,  0. + 0.j,
                 -0.37240165+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j])),
        (
            3, 2, None, 'np_fabric', 3,
            math.array([2.01413877, 5.93811774, 5.81010862, 4.97534544, 4.98236124,
                        4.9004893, 2.42094892, 5.3987711, 5.11801018, 2.70552269,
                        3.45007936, 5.97059085]),

            math.array(
                [0. + 0.j,  0. + 0.j,  0. + 0.j, -0.32446115+0.j,
                 0. + 0.j,  0. + 0.j, -0.44435667+0.j,  0. + 0.j,
                 0. + 0.j,  0.44435667+0.j,  0. + 0.j,  0. + 0.j,
                 0.35621538+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j, -0.38241664+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0.08264799+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.38241664+0.j,  0. + 0.j,  0. + 0.j,
                 -0.08264799+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 -0.25842506+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j])),
        (
            4, 4, False, 'np_fabric', 4,
            math.array([4.2808123, 5.945537, 2.43379516, 2.72637244, 3.63442375,
                        1.97854203, 6.10027541, 4.35196026, 2.26360198, 1.95361605,
                        3.64763034, 6.26125822, 4.44836012, 0.79723552, 0.83029278,
                        5.23020659, 5.82501827, 4.31889747, 3.51925253, 2.91393524]),

            math.array(
                [0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.0112551 + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.01378435+0.j,
                 0. + 0.j,  0. + 0.j, -0.11568372+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j, -0.01378435+0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.11568372+0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.23852178+0.j,
                 0. + 0.j,  0. + 0.j, -0.01330824+0.j,  0. + 0.j,
                 0. + 0.j,  0.01330824+0.j,  0. + 0.j,  0. + 0.j,
                 -0.22995289+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j, -0.00550088+0.j,
                 0. + 0.j,  0. + 0.j,  0.13858616+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0.24079503+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.01635287+0.j,
                 0. + 0.j,  0. + 0.j, -0.03787434+0.j,  0. + 0.j,
                 0. + 0.j, -0.20292069+0.j,  0. + 0.j,  0. + 0.j,
                 -0.08862192+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j, -0.16990461+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0.11718413+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.00550088+0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j, -0.13858616+0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j, -0.01635287+0.j,
                 0. + 0.j,  0. + 0.j, -0.20292069+0.j,  0. + 0.j,
                 0. + 0.j, -0.03787434+0.j,  0. + 0.j,  0. + 0.j,
                 0.08862192+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.24079503+0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.16990461+0.j,  0. + 0.j,  0. + 0.j,
                 -0.11718413+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0.47817114+0.j,
                 0. + 0.j,  0. + 0.j, -0.13278156+0.j,  0. + 0.j,
                 0. + 0.j,  0.13278156+0.j,  0. + 0.j,  0. + 0.j,
                 0.49336358+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j, -0.06757261+0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0.0296146 + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0.06757261+0.j,  0. + 0.j,  0. + 0.j,
                 -0.0296146 + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0.05742506+0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j,
                 0. + 0.j,  0. + 0.j,  0. + 0.j,  0. + 0.j])),

    ],
)
def test_state(ncas, nelecas, add_singles, ansatz, n_layers, theta, state_ref):
    pqc_torch = get_pqc(ncas, nelecas, add_singles, ansatz, n_layers, 'torch')
    pqc_jax = get_pqc(ncas, nelecas, add_singles, ansatz, n_layers, 'jax')
    assert math.allclose(pqc_torch.qnode(math.array(theta, like='torch')), state_ref)
    assert math.allclose(pqc_jax.qnode(math.array(theta, like='jax')), state_ref)


@pytest.mark.parametrize(
    ("ncas", "nelecas", "add_singles", "ansatz", "n_layers", "theta", "one_rdm_ref", "two_rdm_ref"),
    [
        (
            2, 2, False, 'ucc', None,
            math.array([2.71668364]),
            math.array(
                [[8.89237535e-02, 5.31974778e-17],
                 [5.31974778e-17, 1.91107625e+00]]),
            math.array(
                [[[[8.89237535e-02, -1.46313413e-17],
                   [-1.46313413e-17,  1.26918783e-31]],
                  [[-1.46313413e-17, -4.12237884e-01],
                   [-7.68446048e-32,  6.78288192e-17]]],
                 [[[-1.46313413e-17, -7.68446048e-32],
                   [-4.12237884e-01,  6.78288192e-17]],
                  [[1.26918783e-31,  6.78288192e-17],
                   [6.78288192e-17,  1.91107625e+00]]]]
            )),
        (
            2, 2, True, 'ucc', None,
            math.array([0.83017788, 5.32170895, 4.91591844]),
            math.array(
                [[1.1260318, -0.0082858],
                 [-0.0082858,  0.8739682]]),
            math.array(
                [[[[0.5227446, -0.00481848],
                   [-0.00481848,  0.6032872]],

                    [[-0.00481848,  0.37616091],
                     [-0.60319837, -0.00346732]]],


                    [[[-0.00481848, -0.60319837],
                      [0.37616091, -0.00346732]],

                     [[0.6032872, -0.00346732],
                        [-0.00346732,  0.270681]]]]
            )),
        (
            3, 4, False, 'ucc', None,
            math.array([2.42497113, 3.05778482, 4.31245676, 0.80671294]),
            math.array(
                [[1.23051322e-01, -3.15587782e-01,  4.71800797e-20],
                 [-3.15587782e-01,  1.87706017e+00,  5.01694726e-17],
                 [4.71800797e-20,  5.01694726e-17,  1.99988851e+00]]),
            math.array(
                [[[[1.31794361e-04,  1.07740370e-03, -6.02449238e-18],
                   [1.07740370e-03,  1.23142508e-01,  5.00933705e-17],
                    [-6.02449238e-18,  5.00933705e-17,  2.45879665e-01]],

                    [[1.07740370e-03, -5.96780948e-03,  1.66516597e-17],
                     [-8.69216584e-03, -3.16665185e-01, -1.07635521e-19],
                     [-2.11620726e-18,  2.06579146e-20, -6.31175563e-01]],

                    [[-6.02449238e-18,  1.66516597e-17,  1.39841482e-02],
                     [-2.11620726e-18,  6.16725947e-18,  2.52464041e-03],
                     [-1.22939832e-01,  3.15587782e-01, -1.22685094e-21]]],


                    [[[1.07740370e-03, -8.69216584e-03, -2.11620726e-18],
                      [-5.96780948e-03, -3.16665185e-01,  2.06579146e-20],
                        [1.66516597e-17, -1.07635521e-19, -6.31175563e-01]],

                     [[1.23142508e-01, -3.16665185e-01,  6.16725947e-18],
                     [-3.16665185e-01,  1.75414064e+00,  5.01128179e-17],
                        [6.16725947e-18,  5.01128179e-17,  3.75389736e+00]],

                     [[5.00933705e-17, -1.07635521e-19,  2.52464041e-03],
                     [2.06579146e-20,  5.01128179e-17, -4.75788741e-05],
                        [3.15587782e-01, -1.87694868e+00,  5.03022294e-17]]],


                    [[[-6.02449238e-18, -2.11620726e-18, -1.22939832e-01],
                      [1.66516597e-17,  6.16725947e-18,  3.15587782e-01],
                        [1.39841482e-02,  2.52464041e-03, -1.22685094e-21]],

                     [[5.00933705e-17,  2.06579146e-20,  3.15587782e-01],
                        [-1.07635521e-19,  5.01128179e-17, -1.87694868e+00],
                        [2.52464041e-03, -4.75788741e-05,  5.03022294e-17]],

                     [[2.45879665e-01, -6.31175563e-01, -1.22685094e-21],
                        [-6.31175563e-01,  3.75389736e+00,  5.03022294e-17],
                        [-1.22685094e-21,  5.03022294e-17,  1.99988851e+00]]]]
            )),
        (
            3, 4, True, 'ucc', None,
            math.array([2.22135067, 3.45275994, 4.31344877, 0.2790657, 2.16034378,
                        3.75290024, 2.90562812, 0.30381809]),
            math.array(
                [[1.78713688,  0.39875278,  0.29944119],
                 [0.39875278,  1.24086346, -0.60713414],
                    [0.29944119, -0.60713414,  0.97199966]]),
            math.array(
                [[[[1.5785223,  0.38660405,  0.27792901],
                   [0.38660405,  2.09101209, -1.1485593],
                    [0.27792901, -1.1485593,  1.69187624]],

                    [[0.38660405,  0.02117974,  0.04353691],
                     [-0.99353305,  0.3381892, -0.43078373],
                     [0.66445355, -0.10724207,  0.47146508]],

                    [[0.27792901,  0.04353691,  0.03165514],
                     [0.66445355,  0.48123684, -0.09051803],
                     [-0.71488898, -0.51360429,  0.13915772]]],


                    [[[0.38660405, -0.99353305,  0.66445355],
                      [0.02117974,  0.3381892, -0.10724207],
                        [0.04353691, -0.43078373,  0.47146508]],

                     [[2.09101209,  0.3381892,  0.48123684],
                     [0.3381892,  0.5873117, -0.39009485],
                        [0.48123684, -0.39009485,  1.04426659]],

                     [[-1.1485593, -0.43078373, -0.09051803],
                     [-0.10724207, -0.39009485,  0.1578065],
                     [-0.51360429,  0.06088524, -0.28274827]]],


                    [[[0.27792901,  0.66445355, -0.71488898],
                      [0.04353691,  0.48123684, -0.51360429],
                        [0.03165514, -0.09051803,  0.13915772]],

                     [[-1.1485593, -0.10724207, -0.51360429],
                     [-0.43078373, -0.39009485,  0.06088524],
                     [-0.09051803,  0.1578065, -0.28274827]],

                     [[1.69187624,  0.47146508,  0.13915772],
                     [0.47146508,  1.04426659, -0.28274827],
                        [0.13915772, -0.28274827,  0.17985615]]]]
            )),
        (
            2, 2, None, 'np_fabric', 1,
            math.array([3.66358854, 4.97356552]),
            math.array(
                [[0.77617054, -0.83742894],
                 [-0.83742894,  1.22382946]]),
            math.array(
                [[[[0.54219149, -0.35617615],
                   [-0.35617615,  0.23397904]],

                    [[-0.35617615,  0.73259025],
                     [0.23397904, -0.4812528]]],


                    [[[-0.35617615,  0.23397904],
                      [0.73259025, -0.4812528]],

                     [[0.23397904, -0.4812528],
                        [-0.4812528,  0.98985042]]]]
            )),
        (
            3, 4, None, 'np_fabric', 3,
            math.array([4.04734982, 0.98768397, 1.38191288, 1.15893975, 1.21274074,
                        1.94648096, 2.50102789, 3.85547197, 1.43990509, 4.74412951]),
            math.array(
                [[1.24418131, 0.57823241, 0.20878144],
                 [0.57823241, 1.06448358, 0.17565641],
                    [0.20878144, 0.17565641, 1.69133511]]),
            math.array(
                [[[[0.60659817,  0.32657763,  0.3185761],
                   [0.32657763,  1.15295654,  0.1176238],
                    [0.3185761,  0.1176238,  1.97298922]],

                    [[0.32657763,  0.19521827,  0.09576534],
                     [0.22696188,  0.16272616, -0.4126102],
                     [-0.40934544,  0.18128155,  1.24539343]],

                    [[0.3185761,  0.09576534, -0.12356899],
                     [-0.40934544,  0.21373412,  0.26300656],
                     [-0.83356005, -0.4893038,  0.0940341]]],


                    [[[0.32657763,  0.22696188, -0.40934544],
                      [0.19521827,  0.16272616,  0.18128155],
                        [0.09576534, -0.4126102,  1.24539343]],

                     [[1.15295654,  0.16272616,  0.21373412],
                     [0.16272616,  0.4512913,  0.33377421],
                        [0.21373412,  0.33377421,  1.58920289]],

                     [[0.1176238, -0.4126102,  0.26300656],
                     [0.18128155,  0.33377421, -0.20402428],
                        [-0.4893038, -0.67825318,  0.07557123]]],


                    [[[0.3185761, -0.40934544, -0.83356005],
                      [0.09576534,  0.21373412, -0.4893038],
                        [-0.12356899,  0.26300656,  0.0940341]],

                     [[0.1176238,  0.18128155, -0.4893038],
                     [-0.4126102,  0.33377421, -0.67825318],
                        [0.26300656, -0.20402428,  0.07557123]],

                     [[1.97298922,  1.24539343,  0.0940341],
                     [1.24539343,  1.58920289,  0.07557123],
                        [0.0940341,  0.07557123,  1.51181323]]]]
            )),
        (
            3, 2, None, 'np_fabric', 3,
            math.array([3.05200481, 1.62188459, 5.57466645, 5.67138464, 2.5646405,
                        1.88951346, 2.75754974, 0.24409616, 5.51292364, 0.16558067,
                        5.39463118, 4.09175756]),
            math.array(
                [[1.38497048, -0.17378787,  0.16143133],
                 [-0.17378787,  0.24094986,  0.24827551],
                 [0.16143133,  0.24827551,  0.37407967]]),
            math.array(
                [[[[1.3362565, -0.16370185,  0.19569383],
                   [-0.16370185,  0.02005475, -0.02397402],
                   [0.19569383, -0.02397402,  0.02865923]],

                    [[-0.16370185, -0.38085085, -0.38745986],
                     [0.02005475,  0.0466572,  0.04746686],
                     [-0.02397402, -0.05577534, -0.05674323]],

                    [[0.19569383, -0.38745986, -0.55807272],
                     [-0.02397402,  0.04746686,  0.06836826],
                     [0.02865923, -0.05674323, -0.08172936]]],


                    [[[-0.16370185,  0.02005475, -0.02397402],
                      [-0.38085085,  0.0466572, -0.05577534],
                        [-0.38745986,  0.04746686, -0.05674323]],

                     [[0.02005475,  0.0466572,  0.04746686],
                        [0.0466572,  0.10854755,  0.11043121],
                        [0.04746686,  0.11043121,  0.11234755]],

                     [[-0.02397402,  0.04746686,  0.06836826],
                     [-0.05577534,  0.11043121,  0.15905814],
                        [-0.05674323,  0.11234755,  0.16181832]]],


                    [[[0.19569383, -0.02397402,  0.02865923],
                      [-0.38745986,  0.04746686, -0.05674323],
                        [-0.55807272,  0.06836826, -0.08172936]],

                     [[-0.02397402, -0.05577534, -0.05674323],
                     [0.04746686,  0.11043121,  0.11234755],
                     [0.06836826,  0.15905814,  0.16181832]],

                     [[0.02865923, -0.05674323, -0.08172936],
                     [-0.05674323,  0.11234755,  0.16181832],
                        [-0.08172936,  0.16181832,  0.23307289]]]]
            )),
        (
            4, 4, False, 'np_fabric', 4,
            math.array([1.48532462, 0.10008496, 4.31656262, 1.34716912, 2.331251,
                        3.39662398, 1.58566461, 5.90449164, 4.99674752, 2.09294066,
                        4.27713621, 0.45558506, 2.05714827, 5.46125623, 0.31508037,
                        0.07834456, 6.22779887, 5.72483971, 4.85581026, 2.85397037]),
            math.array(
                [[1.60321994,  0.06650257,  0.24683633, -0.12216654],
                 [0.06650257,  0.43048775, -0.0478442, -0.22260647],
                    [0.24683633, -0.0478442,  1.03916065,  0.24265104],
                    [-0.12216654, -0.22260647,  0.24265104,  0.92713166]]),
            math.array(
                [[[[1.46450914,  0.07089292,  0.16096415, -0.08564569],
                   [0.07089292,  0.26730117, -0.17739378, -0.3479483],
                    [0.16096415, -0.17739378,  1.62690646,  0.49254097],
                    [-0.08564569, -0.3479483,  0.49254097,  1.45094304]],

                    [[0.07089292,  0.05311868, -0.17943202, -0.0108552],
                     [-0.12053828,  0.04609556, -0.07568114,  0.05353449],
                     [0.12530013, -0.2834348,  0.20654662, -0.03078265],
                     [0.1617317, -0.02215689,  0.10408332, -0.12402738]],

                    [[0.16096415, -0.17943202, -0.06206803, -0.02911857],
                     [0.12530013,  0.17485552, -0.0027513, -0.06085645],
                     [-0.63143291, -0.21134124,  0.0897721,  0.07806733],
                     [-0.28932549, -0.25249969,  0.05745719,  0.31491723]],

                    [[-0.08564569, -0.0108552, -0.02911857, -0.00764258],
                     [0.1617317, -0.0641808,  0.0394306,  0.06662187],
                     [-0.28932549,  0.10674735, -0.17071701, -0.1955195],
                     [-0.71253795,  0.09435276, -0.17505511, -0.04595613]]],


                    [[[0.07089292, -0.12053828,  0.12530013,  0.1617317],
                      [0.05311868,  0.04609556, -0.2834348, -0.02215689],
                        [-0.17943202, -0.07568114,  0.20654662,  0.10408332],
                        [-0.0108552,  0.05353449, -0.03078265, -0.12402738]],

                     [[0.26730117,  0.04609556,  0.17485552, -0.0641808],
                     [0.04609556,  0.32266873,  0.02216476, -0.04062883],
                        [0.17485552,  0.02216476,  0.43976316, -0.01707964],
                        [-0.0641808, -0.04062883, -0.01707964,  0.26173021]],

                     [[-0.17739378, -0.07568114, -0.0027513,  0.0394306],
                     [-0.2834348,  0.02216476, -0.03797473,  0.00879209],
                     [-0.21134124, -0.13266305, -0.06627574,  0.06650648],
                        [0.10674735,  0.03683371, -0.15507862,  0.07797215]],

                     [[-0.3479483,  0.05353449, -0.06085645,  0.06662187],
                     [-0.02215689, -0.04062883,  0.00879209,  0.03751755],
                     [-0.25249969,  0.03683371, -0.09163293,  0.01843657],
                        [0.09435276, -0.06946739, -0.08118915, -0.18760934]]],


                    [[[0.16096415,  0.12530013, -0.63143291, -0.28932549],
                      [-0.17943202,  0.17485552, -0.21134124, -0.25249969],
                        [-0.06206803, -0.0027513,  0.0897721,  0.05745719],
                        [-0.02911857, -0.06085645,  0.07806733,  0.31491723]],

                     [[-0.17739378, -0.2834348, -0.21134124,  0.10674735],
                     [-0.07568114,  0.02216476, -0.13266305,  0.03683371],
                     [-0.0027513, -0.03797473, -0.06627574, -0.15507862],
                        [0.0394306,  0.00879209,  0.06650648,  0.07797215]],

                     [[1.62690646,  0.20654662,  0.0897721, -0.17071701],
                     [0.20654662,  0.43976316, -0.06627574, -0.09163293],
                        [0.0897721, -0.06627574,  0.83540398,  0.11009681],
                        [-0.17071701, -0.09163293,  0.11009681,  0.21540836]],

                     [[0.49254097, -0.03078265,  0.07806733, -0.1955195],
                     [0.10408332, -0.01707964,  0.06650648,  0.01843657],
                        [0.05745719, -0.15507862,  0.11009681,  0.59761159],
                        [-0.17505511, -0.08118915, -0.07130802,  0.14239497]]],


                    [[[-0.08564569,  0.1617317, -0.28932549, -0.71253795],
                      [-0.0108552, -0.0641808,  0.10674735,  0.09435276],
                        [-0.02911857,  0.0394306, -0.17071701, -0.17505511],
                        [-0.00764258,  0.06662187, -0.1955195, -0.04595613]],

                     [[-0.3479483, -0.02215689, -0.25249969,  0.09435276],
                     [0.05353449, -0.04062883,  0.03683371, -0.06946739],
                        [-0.06085645,  0.00879209, -0.09163293, -0.08118915],
                        [0.06662187,  0.03751755,  0.01843657, -0.18760934]],

                     [[0.49254097,  0.10408332,  0.05745719, -0.17505511],
                        [-0.03078265, -0.01707964, -0.15507862, -0.08118915],
                        [0.07806733,  0.06650648,  0.11009681, -0.07130802],
                        [-0.1955195,  0.01843657,  0.59761159,  0.14239497]],

                     [[1.45094304, -0.12402738,  0.31491723, -0.04595613],
                        [-0.12402738,  0.26173021,  0.07797215, -0.18760934],
                        [0.31491723,  0.07797215,  0.21540836,  0.14239497],
                        [-0.04595613, -0.18760934,  0.14239497,  0.85331336]]]]
            ))
    ],
)
def test_rdms(ncas, nelecas, add_singles, ansatz, n_layers, theta, one_rdm_ref, two_rdm_ref):
    pqc_torch = get_pqc(ncas, nelecas, add_singles, ansatz, n_layers, 'torch')
    pqc_jax = get_pqc(ncas, nelecas, add_singles, ansatz, n_layers, 'jax')

    state_torch = pqc_torch.qnode(math.array(theta, like='torch'))
    state_jax = pqc_jax.qnode(math.array(theta, like='jax'))

    one_rdm_torch, two_rdm_torch = pqc_torch.get_rdms_from_state(state_torch)
    one_rdm_jax, two_rdm_jax = pqc_jax.get_rdms_from_state(state_jax)

    assert math.allclose(one_rdm_torch, one_rdm_ref)
    assert math.allclose(two_rdm_torch, two_rdm_ref)
    assert math.allclose(one_rdm_jax, one_rdm_ref)
    assert math.allclose(two_rdm_jax, two_rdm_ref)
