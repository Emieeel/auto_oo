#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May  2 16:45:23 2023

@author: emielkoridon
"""

import pytest

import numpy as np
from pyscf import gto, fci, mcscf, scf

import auto_oo


@pytest.mark.parametrize(
    ("geometry, basis, oao_coeff_ref"),
    [
        (auto_oo.get_formal_geo(140, 80), 'sto-3g',
         np.array([[1.02410942e+00, -1.44485996e-01, -1.22283337e-03,
                    -6.92105527e-03, -1.22191185e-03, -1.68737940e-03,
                    1.75420166e-02, -1.64976921e-02,  3.63410363e-04,
                    9.10179123e-05,  7.02693079e-04,  7.69242606e-04,
                    2.45601209e-02],
                   [-1.44485996e-01,  1.27102203e+00, -8.35510237e-03,
                    8.33090765e-02,  1.47040840e-02,  2.05491933e-02,
                    -1.74022090e-01,  2.16821224e-01, -3.37367753e-03,
                    -8.62524345e-04, -1.09749430e-02, -1.16666054e-02,
                    -3.66189921e-01],
                   [-1.22283337e-03, -8.35510237e-03,  1.17080424e+00,
                    -6.09411627e-02, -1.07561034e-02,  1.55985716e-02,
                    -2.00656514e-01,  2.13767917e-01,  2.46589718e-03,
                    6.30139174e-04, -1.02027449e-02, -9.69784783e-03,
                    2.67483185e-01],
                   [-6.92105527e-03,  8.33090765e-02, -6.09411627e-02,
                    1.05594126e+00,  8.42234637e-03, -5.58826900e-04,
                    6.92144928e-03, -7.04309680e-03, -7.63897614e-02,
                    -4.93211825e-04,  8.70467891e-04,  4.74942082e-04,
                    -2.09761320e-01],
                   [-1.22191185e-03,  1.47040840e-02, -1.07561034e-02,
                    8.42234637e-03,  1.01025279e+00, -9.86413949e-05,
                    1.22157318e-03, -1.24292348e-03, -3.40658645e-04,
                    -8.40429606e-02,  1.11163141e-02, -1.08789589e-02,
                    -3.70164397e-02],
                   [-1.68737940e-03,  2.05491933e-02,  1.55985716e-02,
                    -5.58826900e-04, -9.86413949e-05,  1.02845157e+00,
                    -1.66022513e-01, -7.48021951e-04,  2.51443819e-05,
                    6.34381847e-06,  2.62311797e-02,  2.62360254e-02,
                    2.23010467e-03],
                   [1.75420166e-02, -1.74022090e-01, -2.00656514e-01,
                    6.92144928e-03,  1.22157318e-03, -1.66022513e-01,
                    1.41719899e+00,  3.75451001e-02, -2.64145217e-04,
                    -6.79178174e-05, -3.68521259e-01, -3.68577010e-01,
                    -3.16218915e-02],
                   [-1.64976921e-02,  2.16821224e-01,  2.13767917e-01,
                    -7.04309680e-03, -1.24292348e-03, -7.48021951e-04,
                    3.75451001e-02,  1.16950164e+00,  2.42905654e-04,
                    6.29243560e-05, -1.67318064e-01, -1.67264548e-01,
                    3.37769658e-02],
                   [3.63410363e-04, -3.37367753e-03,  2.46589718e-03,
                    -7.63897614e-02, -3.40658645e-04,  2.51443819e-05,
                    -2.64145217e-04,  2.42905654e-04,  1.00832990e+00,
                    2.67703703e-05, -2.43181136e-05, -5.12373901e-06,
                    6.41676147e-03],
                   [9.10179123e-05, -8.62524345e-04,  6.30139174e-04,
                    -4.93211825e-04, -8.40429606e-02,  6.34381847e-06,
                    -6.79178174e-05,  6.29243560e-05,  2.67703703e-05,
                    1.22811066e+00, -3.27055897e-01,  3.27047885e-01,
                    1.71464547e-03],
                   [7.02693079e-04, -1.09749430e-02, -1.02027449e-02,
                    8.70467891e-04,  1.11163141e-02,  2.62311797e-02,
                    -3.68521259e-01, -1.67318064e-01, -2.43181136e-05,
                    -3.27055897e-01,  1.29124706e+00, -3.95728266e-02,
                    -4.59431442e-03],
                   [7.69242606e-04, -1.16666054e-02, -9.69784783e-03,
                    4.74942082e-04, -1.08789589e-02,  2.62360254e-02,
                    -3.68577010e-01, -1.67264548e-01, -5.12373901e-06,
                    3.27047885e-01, -3.95728266e-02,  1.29123882e+00,
                    -3.00271688e-03],
                   [2.45601209e-02, -3.66189921e-01,  2.67483185e-01,
                    -2.09761320e-01, -3.70164397e-02,  2.23010467e-03,
                    -3.16218915e-02,  3.37769658e-02,  6.41676147e-03,
                    1.71464547e-03, -4.59431442e-03, -3.00271688e-03,
                    1.27359252e+00]]))
    ],
)
def test_ao_to_oao(geometry, basis, oao_coeff_ref, **kwargs):
    mol = gto.Mole(atom=geometry, basis=basis, **kwargs)
    mol.build()
    oao_coeff = auto_oo.ao_to_oao(mol.intor('int1e_ovlp'))
    assert np.allclose(oao_coeff, oao_coeff_ref)


def test_active_space_indices():
    pass


def test_fci():
    pass


def test_casci():
    pass


def test_casscf():
    pass


def test_sa_casscf():
    pass
