#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  9 16:10:18 2023

@author: emielkoridon
"""

import numpy as np

import pennylane as qml
import torch
from functorch import jacfwd, hessian

from auto_oo.oo_energy.oo_energy import OO_energy
from auto_oo.ansatz.pqc import Parameterized_circuit
from auto_oo.moldata_pyscf import Moldata_pyscf

def vector_to_skew_symmetric(vector):
    r"""
    Map a vector to an anti-symmetric matrix with np.tril_indices.
    
    For example, the resulting matrix for `np.Tensor([1,2,3,4,5,6])` is:

    .. math::
        \begin{pmatrix}
            0 & -1 & -2 & -4\\
            1 &  0 & -3 & -5\\
            2 &  3 &  0 & -6\\
            4 &  5 &  6 &  0
        \end{pmatrix}

    Args:
        vector (torch.Tensor): 1d tensor
    """
    size = int(np.sqrt(8 * len(vector) + 1) + 1)//2
    matrix = torch.zeros((size,size))
    tril_indices = torch.tril_indices(row=size,col=size, offset=-1)
    matrix[tril_indices[0],tril_indices[1]] = vector
    matrix[tril_indices[1],tril_indices[0]] = - vector
    return matrix

def skew_symmetric_to_vector(kappa_matrix):
    """Return 1D tensor of parameters given anti-symmetric matrix `kappa`"""
    size = kappa_matrix.size(dim=0)
    tril_indices = torch.tril_indices(row=size,col=size, offset=-1)
    return kappa_matrix[tril_indices[0],tril_indices[1]]

class OO_pqc_cost(OO_energy):
    def __init__(self, pqc : Parameterized_circuit, mol : Moldata_pyscf,
                 ncas, nelecas, oao_mo_coeff=None, freeze_active=False):
        """
        Orbital Optimized energy class for extracting energies by computing RDMs
        from a quantum state generated by a quantum circuit. Can compute composite
        gradients and hessians with respect to both orbital and quantum circuit 
        parameters.

        Args:
            pqc: Parameterized_circuit class containing the ansatz and the method
                to extract the state and the RDMs
            mol: Moldata_pyscf class containing molecular information like
                geometry, AO basis, MO basis and 1e- and 2e-integrals
            ncas: Number of active orbitals
            nelecas: Number of active electrons
            oao_mo_coeff (default None): Reference OAO-MO coefficients (ndarray)
            freeze_active (default: False):
                Freeze active-active orbital rotations
        """
        super().__init__(mol, ncas, nelecas,
                     oao_mo_coeff=oao_mo_coeff, freeze_active=freeze_active)
        self.pqc = pqc
        
        rotation_sizes = [len(self.occ_idx)*len(self.act_idx),
                          len(self.act_idx)*len(self.virt_idx),
                          len(self.occ_idx)*len(self.virt_idx)]
        if not freeze_active:
            rotation_sizes.append(
                len(self.act_idx) * (len(self.act_idx) - 1)//2)
        self.n_kappa = sum(rotation_sizes)

        # Save non-redundant kappa indices
        self.params_idx = np.array([], dtype=int)

        num = 0
        for l_idx, r_idx in zip(*np.tril_indices(self.nao,-1)):
            if not(
            ((l_idx in self.act_idx and r_idx in self.act_idx
              ) and freeze_active) or (
                  l_idx in self.occ_idx and r_idx in self.occ_idx) or (
                    l_idx in self.virt_idx and r_idx in self.virt_idx)):
                self.params_idx = np.append(self.params_idx, [num])
            num +=1
        
    def energy_from_parameters(self, theta, kappa=None):
        r"""
        Get total energy given quantum circuit parameters and orbital transformation parameters.
        Total energy is computed as:

        .. math::
            E = E_{\rm nuc} + E_{\rm core} +
            \sum_{pq}\tilde{h}_{pq} \gamma_{pq} + 
            \sum_{pqrs} g_{pqrs} \Gamma_{pqrs}

        where :math:`E_{core}` is the mean-field energy of the core (doubly-occupied) orbitals,
        :math:`\tilde{h}_{pq}` is contains the active one-body terms plus the mean-field
        interaction of core-active orbitals and :math:`g_{pqrs}` are the active integrals
        in chemist ordering.
        """
        if kappa is None:
            mo_coeff = self.mo_coeff
        else:
            mo_coeff = self.get_transformed_mo(self.mo_coeff, kappa)
        state = self.pqc.ansatz_state(theta)
        one_rdm, two_rdm = self.pqc.get_rdms_from_state(state)
        return self.energy_from_mo_coeff(mo_coeff, one_rdm, two_rdm)
    
    def circuit_gradient(self, theta):
        return jacfwd(self.energy_from_parameters)(theta)
    
    def orbital_gradient(self, theta):
        """Generate analytically the flattened electronic gradient w.r.t. orbital rotation
        parameters for a given set of circuit parameters"""
        state = self.pqc.ansatz_state(theta)
        one_rdm, two_rdm = self.pqc.get_rdms_from_state(state)
        return self.kappa_matrix_to_vector(
            self.analytic_gradient(one_rdm, two_rdm))  
    
    def circuit_circuit_hessian(self, theta):
        return hessian(self.energy_from_parameters)(theta)

    def orbital_circuit_hessian(self, theta):
        """Generate the mixed orbital-pqc parameter hessian by automatic differentation
        of the analytic orbital gradient"""
        return jacfwd(
            self.orbital_gradient)(theta)
    
    def orbital_orbital_hessian(self, theta):
        state = self.pqc.ansatz_state(theta)
        one_rdm, two_rdm = self.pqc.get_rdms_from_state(state)
        return self.full_hessian_to_matrix(
            self.analytic_hessian(one_rdm, two_rdm))

    def kappa_vector_to_matrix(self, kappa):
        """Generate a skew-symmetric matrix from orbital rotation parameters"""
        kappa_total_vector = torch.zeros(self.nao * (self.nao - 1)//2)
        kappa_total_vector[self.params_idx] = kappa
        return vector_to_skew_symmetric(kappa_total_vector)
    
    def kappa_matrix_to_vector(self, kappa_matrix):
        """Generate orbital rotation parameters from a skew-symmetric matrix"""
        kappa_total_vector = skew_symmetric_to_vector(kappa_matrix)
        return kappa_total_vector[self.params_idx]

    def kappa_to_mo_coeff(self, kappa):
        """ Generate a skew_symmetric matrix from orbital rotation parameters
        and exponentiate it to get an orbital transformation"""
        kappa_matrix = self.kappa_vector_to_matrix(kappa)
        return torch.linalg.matrix_exp(-kappa_matrix)

    def get_transformed_mo(self, mo_coeff, kappa):
        """ Transform a general matrix mo_coeff with orbital rotation parameters
        kappa"""
        mo_coeff_transformed = mo_coeff @ self.kappa_to_mo_coeff(kappa)
        return mo_coeff_transformed 

    def full_hessian_to_matrix(self, full_hess):
        """Convert the full Hessian (nao,nao,nao,nao) torch.Tensor to a matrix with only
        non-redundant indices."""
        tril_indices = torch.tril_indices(row=self.nao, col=self.nao, offset=-1)
        partial_hess = full_hess[tril_indices[0],tril_indices[1],:,:]
        reduced_hess = partial_hess[:,tril_indices[0],tril_indices[1]]
        nonredundant_hess = reduced_hess[self.params_idx,:][:,self.params_idx]
        return nonredundant_hess

if __name__ == '__main__':
    from cirq import dirac_notation
    import matplotlib.pyplot as plt
    
    torch.set_num_threads(12)
    
    def get_formal_geo(alpha,phi):
        variables = [1.498047, 1.066797, 0.987109, 118.359375] + [alpha, phi]
        geom = """
                        N
                        C 1 {0}
                        H 2 {1}  1 {3}
                        H 2 {1}  1 {3} 3 180
                        H 1 {2}  2 {4} 3 {5}
                        """.format(*variables)
        return geom
    
    geometry = get_formal_geo(140, 80)
    basis = 'sto-3g'
    mol = Moldata_pyscf(geometry, basis)

    ncas = 3
    nelecas = 4
    dev = qml.device('default.qubit', wires=2*ncas)
    pqc = Parameterized_circuit(ncas, nelecas, dev, add_singles=False)
    # theta = torch.rand_like(pqc.init_zeros())
    theta = pqc.init_zeros()
    state = pqc.ansatz_state(theta)
    one_rdm, two_rdm = pqc.get_rdms_from_state(state)

    
    oo_pqc = OO_pqc_cost(pqc, mol, ncas, nelecas)#, oao_mo_coeff = oao_mo_coeff)
    
    
    # mo_coeff = torch.from_numpy(mol.oao_coeff)    
    # from scipy.stats import ortho_group
    # mo_transform = torch.from_numpy(ortho_group.rvs(mol.nao))
    # oao_mo_coeff = mo_transform
    oao_mo_coeff = torch.eye(mol.nao)
    oo_pqc.oao_mo_coeff = oao_mo_coeff
    print("check if property works:",
          torch.allclose(oo_pqc.mo_coeff, torch.from_numpy(mol.oao_coeff) @ oao_mo_coeff)     )
    

    
    kappa = torch.zeros(oo_pqc.n_kappa)
    energy_test = oo_pqc.energy_from_parameters(theta, kappa)
    print("theta:", theta)
    print("state:", dirac_notation(state.detach().numpy()))
    print('Expectation value of Hamiltonian:', energy_test.item())
    mol.run_rhf()
    print('HF energy:', mol.hf.e_tot)
    
    plt.title('one rdm')
    plt.imshow(one_rdm)
    plt.colorbar()
    plt.show()
    plt.title('two rdm')
    plt.imshow(two_rdm.reshape(ncas**2,ncas**2))
    plt.colorbar()
    plt.show()

   

    import time
    t0 = time.time()
    grad_auto = jacfwd(oo_pqc.energy_from_parameters, argnums=(0,1))(
        theta,kappa)
    hess_auto = hessian(oo_pqc.energy_from_parameters,
                        argnums=(0,1))(theta, kappa)
    print("time took to generate everything with auto-differentation:", time.time()-t0)
    
    t1 = time.time()
    print("should all be True:",
          torch.allclose(grad_auto[0], oo_pqc.circuit_gradient(theta)),
          torch.allclose(grad_auto[1], oo_pqc.orbital_gradient(theta)),
          torch.allclose(hess_auto[0][0], oo_pqc.circuit_circuit_hessian(theta)),
          torch.allclose(hess_auto[1][0], oo_pqc.orbital_circuit_hessian(theta)),
          torch.allclose(hess_auto[1][1], oo_pqc.orbital_orbital_hessian(theta)))
    print("time took to generate full hessian but orbital part analytically:",
          time.time()-t1)
    
    
    
    # orbgrad_auto_2d = oo_pqc.kappa_vector_to_matrix(orbgrad_auto[1])
    # orbgrad_exact = oo_pqc.orbital_gradient(one_rdm, two_rdm)
    
    # plt.title('automatic diff orbital gradient')
    # plt.imshow(orbgrad_auto_2d)
    # plt.colorbar()
    # plt.show()
    # plt.title('exact orbital gradient')
    # plt.imshow(orbgrad_exact)
    # plt.colorbar()
    # plt.show()
    
    # orbgrad_auto_flat = orbgrad_auto[1]
    # orbgrad_exact_flat = oo_pqc.kappa_matrix_to_vector(orbgrad_exact)
    

    # t0 = time.time()
    # orbhess_auto_comp = hessian(oo_pqc.energy_from_parameters,
    #                             argnums=(0,1))(theta, kappa)
    # # orbhess_auto_comp = torch.autograd.functional.hessian(oo_pqc.energy_from_parameters,
    # #                                                       (theta, kappa))
    # print("time took to calc hess with automatic diff:", time.time()-t0)
    # orbhess_auto_kappa_theta = orbhess_auto_comp[0][1]
    
    # t1 = time.time()
    # orbhess_exact_kappa_theta = oo_pqc.orbital_circuit_hessian(theta)
    # print("time took to calc mixed hess with exact/automatic took:", time.time()-t1)
    
    # plt.title('kappa-theta hessian automatic diff')
    # plt.imshow(orbhess_auto_kappa_theta)
    # plt.colorbar()
    # plt.show()
    # plt.title('kappa-theta hessian exact autodiff')
    # plt.imshow(orbhess_exact_kappa_theta.t())
    # plt.colorbar()
    # plt.show()
    
    # orborbhess_auto = orbhess_auto_comp[1][1]
    # t2 = time.time()
    # orborbhess_exact_full = oo_pqc.orbital_hessian(one_rdm, two_rdm)
    # orborbhess_exact = oo_pqc.full_hessian_to_matrix(orborbhess_exact_full)
    # print("time took to calc orb-orb hess with exact method took:", time.time()-t2)
    
    # plt.title('kappa-kappa hessian automatic diff')
    # plt.imshow(orborbhess_auto)
    # plt.colorbar()
    # plt.show()
    # plt.title('kappa-kappa hessian exact')
    # plt.imshow(orborbhess_exact)
    # plt.colorbar()
    # plt.show()
    
    # orborb_diff = torch.abs(orborbhess_auto - orborbhess_exact)
    # plt.title('kappa-kappa auto exact diff')
    # plt.imshow(orborb_diff)
    # plt.colorbar()
    # plt.show()
    
    
    
    
    
    
