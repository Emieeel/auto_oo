#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  9 16:10:18 2023

@author: emielkoridon
"""

import pennylane as qml
import torch
# from functorch import jacfwd, hessian
from torch.autograd.functional import jacobian, hessian

from auto_oo.oo_pqc.oo_pqc import OO_pqc_cost
from auto_oo.ansatz.pqc import Parameterized_circuit
from auto_oo.moldata_pyscf.moldata_pyscf import Moldata_pyscf
from auto_oo.newton_raphson.newton_raphson import NewtonStep


class noisy_OO_pqc_cost(OO_pqc_cost):
    def __init__(self,
                 pqc: Parameterized_circuit, mol: Moldata_pyscf,
                 ncas, nelecas, oao_mo_coeff=None, freeze_active=False):
        """
        Orbital Optimized energy class for extracting energies by computing RDMs
        from a quantum state generated by a quantum circuit. Can compute composite
        gradients and hessians with respect to both orbital and quantum circuit 
        parameters.

        Args:
            pqc: Parameterized_circuit class containing the ansatz and the method
                to extract the state and the RDMs
            mol: Moldata_pyscf class containing molecular information like
                geometry, AO basis, MO basis and 1e- and 2e-integrals
            ncas: Number of active orbitals
            nelecas: Number of active electrons
            oao_mo_coeff (default None): Reference OAO-MO coefficients (ndarray)
            freeze_active (default: False):
                Freeze active-active orbital rotations
        """
        super().__init__(pqc, mol, ncas, nelecas,
                         oao_mo_coeff=oao_mo_coeff, freeze_active=freeze_active)

    def noisy_circuit_gradient(self, theta, variance):
        exact_gradient = self.circuit_gradient(theta)
        noisy_gradient = exact_gradient + (variance**0.5)*torch.randn_like(
            exact_gradient)
        return noisy_gradient

    def noisy_orbital_gradient(self, theta, variance):
        exact_gradient = self.orbital_gradient(theta)
        noisy_gradient = exact_gradient + (variance**0.5)*torch.randn_like(
            exact_gradient)
        return noisy_gradient

    def noisy_circuit_circuit_hessian(self, theta, variance):
        exact_hessian = self.circuit_circuit_hessian(theta)
        noisy_hessian = exact_hessian + (variance**0.5)*torch.randn_like(
            exact_hessian)
        return noisy_hessian

    def noisy_orbital_circuit_hessian(self, theta, variance):
        exact_mixed_hessian = self.orbital_circuit_hessian(theta)
        noisy_mixed_hessian = exact_mixed_hessian + (
            variance**0.5)*torch.randn_like(
            exact_mixed_hessian)
        return noisy_mixed_hessian

    def noisy_orbital_orbital_hessian(self, theta, variance):
        exact_orbital_orbital_hessian = self.orbital_orbital_hessian(theta)
        noisy_orbital_orbital_hessian = exact_orbital_orbital_hessian + (
            variance**0.5)*torch.randn_like(
            exact_orbital_orbital_hessian)
        return noisy_orbital_orbital_hessian

    def full_noisy_gradient(self, theta, variance):
        return torch.cat((self.noisy_circuit_gradient(theta, variance),
                          self.noisy_orbital_gradient(theta, variance)))

    def full_noisy_hessian(self, theta, variance):
        hessian_vqe_vqe = self.noisy_circuit_circuit_hessian(theta, variance)
        hessian_vqe_oo = self.noisy_orbital_circuit_hessian(theta, variance)
        hessian_oo_oo = self.noisy_orbital_orbital_hessian(theta, variance)
        hessian = torch.cat((
            torch.cat((hessian_vqe_vqe, hessian_vqe_oo.t()), dim=1),
            torch.cat((hessian_vqe_oo, hessian_oo_oo), dim=1)), dim=0)
        return hessian

    def full_noisy_optimization(self, theta_init, max_iterations=50, conv_tol=1e-10, verbose=0, **kwargs):
        opt = NewtonStep(verbose=verbose, **kwargs)
        energy_init = self.energy_from_parameters(theta_init).item()
        if verbose is not None:
            print(f'iter = 000, energy = {energy_init:.12f}')

        theta_l = []
        kappa_l = []
        oao_mo_coeff_l = []
        energy_l = []
        hess_eig_l = []

        theta = theta_init.detach().clone()
        for n in range(max_iterations):

            kappa = torch.zeros(self.n_kappa)

            gradient = self.full_noisy_gradient(theta)
            hessian = self.full_noisy_hessian(theta)

            new_theta_kappa, hess_eig = opt.damped_newton_step(
                self.energy_from_parameters, (theta, kappa), gradient, hessian)

            hess_eig_l.append(hess_eig)

            theta = new_theta_kappa[0]
            kappa = new_theta_kappa[1]

            theta_l.append(theta.detach().clone())
            kappa_l.append(kappa.detach().clone())

            self.oao_mo_coeff = self.oao_mo_coeff @ self.kappa_to_mo_coeff(
                kappa)

            oao_mo_coeff_l.append(self.oao_mo_coeff.detach().clone())

            energy = self.energy_from_parameters(theta).item()
            energy_l.append(energy)

            if verbose is not None:
                print(f'iter = {n+1:03}, energy = {energy:.12f}')
            if n > 1:
                if (abs(energy_l[-1] - energy_l[-2]) < conv_tol):
                    if verbose is not None:
                        print("optimization finished.")
                        print("E_fin =", energy_l[-1])
                    break

        return energy_l, theta_l, kappa_l, oao_mo_coeff_l, hess_eig_l


if __name__ == '__main__':
    from cirq import dirac_notation
    import matplotlib.pyplot as plt

    torch.set_num_threads(12)

    def get_formal_geo(alpha, phi):
        variables = [1.498047, 1.066797, 0.987109, 118.359375] + [alpha, phi]
        geom = """
                        N
                        C 1 {0}
                        H 2 {1}  1 {3}
                        H 2 {1}  1 {3} 3 180
                        H 1 {2}  2 {4} 3 {5}
                        """.format(*variables)
        return geom

    geometry = get_formal_geo(140, 80)
    basis = 'sto-3g'
    mol = Moldata_pyscf(geometry, basis)

    ncas = 3
    nelecas = 4
    dev = qml.device('default.qubit', wires=2*ncas)
    pqc = Parameterized_circuit(ncas, nelecas, dev, add_singles=False)
    theta = torch.rand_like(pqc.init_zeros())
    # theta = pqc.init_zeros()
    state = pqc.qnode(theta)
    one_rdm, two_rdm = pqc.get_rdms_from_state(state)

    variance = 0.1
    # , oao_mo_coeff = oao_mo_coeff)
    oo_pqc = noisy_OO_pqc_cost(pqc, mol, ncas, nelecas)

    # mo_coeff = torch.from_numpy(mol.oao_coeff)
    # from scipy.stats import ortho_group
    # mo_transform = torch.from_numpy(ortho_group.rvs(mol.nao))
    # oao_mo_coeff = mo_transform
    # oao_mo_coeff = torch.eye(mol.nao)
    # oo_pqc.oao_mo_coeff = oao_mo_coeff
    # print("check if property works:",
    #       torch.allclose(oo_pqc.mo_coeff, torch.from_numpy(mol.oao_coeff) @ oao_mo_coeff)     )

    kappa = torch.zeros(oo_pqc.n_kappa)
    energy_test = oo_pqc.energy_from_parameters(theta, kappa)
    print("theta:", theta)
    print("state:", dirac_notation(state.detach().numpy()))
    print('Expectation value of Hamiltonian:', energy_test.item())
    mol.run_rhf()
    print('HF energy:', mol.hf.e_tot)

    plt.title('one rdm')
    plt.imshow(one_rdm)
    plt.colorbar()
    plt.show()
    plt.title('two rdm')
    plt.imshow(two_rdm.reshape(ncas**2, ncas**2))
    plt.colorbar()
    plt.show()

    import time
    t0 = time.time()
    grad_auto = jacobian(oo_pqc.energy_from_parameters, (
        theta, kappa))
    # grad_auto = jacfwd(oo_pqc.energy_from_parameters, argnums=(0,1))(
    #     theta,kappa)
    hess_auto = hessian(oo_pqc.energy_from_parameters, (theta, kappa))
    # hess_auto = hessian(oo_pqc.energy_from_parameters,
    #                     argnums=(0,1))(theta, kappa)
    print("time took to generate everything with auto-differentation:", time.time()-t0)

    t1 = time.time()
    noisy_C = oo_pqc.noisy_circuit_gradient(
        theta, variance)
    noisy_CC = oo_pqc.noisy_circuit_circuit_hessian(
        theta, variance)
    noisy_CO = oo_pqc.noisy_orbital_circuit_hessian(
        theta, variance)
    C_diff = grad_auto[0] - noisy_C
    CC_diff = hess_auto[0][0] - noisy_CC
    CO_diff = hess_auto[1][0] - noisy_CO
    print("Sum of differences:\n")
    print("gradient C:",
          torch.sum(C_diff).item(),
          "\nhess CC:",
          torch.sum(CC_diff).item(),
          "\nhess CO:",
          torch.sum(CO_diff).item())
    print("\ntime took to generate full hessian but orbital part analytically:",
          time.time()-t1)

    plt.title('circuit gradient diff with noise')
    plt.imshow(C_diff.reshape(2, 2))
    plt.colorbar()
    plt.show()
    plt.title('CC hessian diff with noise')
    plt.imshow(CC_diff)
    plt.colorbar()
    plt.show()
    plt.title('CO hessian diff with noise')
    plt.imshow(CO_diff)
    plt.colorbar()
    plt.show()

    # orbgrad_auto_2d = oo_pqc.kappa_vector_to_matrix(orbgrad_auto[1])
    # orbgrad_exact = oo_pqc.orbital_gradient(one_rdm, two_rdm)

    # plt.title('automatic diff orbital gradient')
    # plt.imshow(orbgrad_auto_2d)
    # plt.colorbar()
    # plt.show()
    # plt.title('exact orbital gradient')
    # plt.imshow(orbgrad_exact)
    # plt.colorbar()
    # plt.show()

    # orbgrad_auto_flat = orbgrad_auto[1]
    # orbgrad_exact_flat = oo_pqc.kappa_matrix_to_vector(orbgrad_exact)

    # t0 = time.time()
    # orbhess_auto_comp = hessian(oo_pqc.energy_from_parameters,
    #                             argnums=(0,1))(theta, kappa)
    # # orbhess_auto_comp = torch.autograd.functional.hessian(oo_pqc.energy_from_parameters,
    # #                                                       (theta, kappa))
    # print("time took to calc hess with automatic diff:", time.time()-t0)
    # orbhess_auto_kappa_theta = orbhess_auto_comp[0][1]

    # t1 = time.time()
    # orbhess_exact_kappa_theta = oo_pqc.orbital_circuit_hessian(theta)
    # print("time took to calc mixed hess with exact/automatic took:", time.time()-t1)

    # plt.title('kappa-theta hessian automatic diff')
    # plt.imshow(orbhess_auto_kappa_theta)
    # plt.colorbar()
    # plt.show()
    # plt.title('kappa-theta hessian exact autodiff')
    # plt.imshow(orbhess_exact_kappa_theta.t())
    # plt.colorbar()
    # plt.show()

    # orborbhess_auto = orbhess_auto_comp[1][1]
    # t2 = time.time()
    # orborbhess_exact_full = oo_pqc.orbital_hessian(one_rdm, two_rdm)
    # orborbhess_exact = oo_pqc.full_hessian_to_matrix(orborbhess_exact_full)
    # print("time took to calc orb-orb hess with exact method took:", time.time()-t2)

    # plt.title('kappa-kappa hessian automatic diff')
    # plt.imshow(orborbhess_auto)
    # plt.colorbar()
    # plt.show()
    # plt.title('kappa-kappa hessian exact')
    # plt.imshow(orborbhess_exact)
    # plt.colorbar()
    # plt.show()

    # orborb_diff = torch.abs(orborbhess_auto - orborbhess_exact)
    # plt.title('kappa-kappa auto exact diff')
    # plt.imshow(orborb_diff)
    # plt.colorbar()
    # plt.show()
